##Assuming that no significant teams leave, we will use the current year roster of teams to filter out NCAA teams

import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import requests #lets us grab the webpage from the internet
from bs4 import BeautifulSoup 

url = "https://www.ncaa.com/standings/basketball-men/d1" #file
page = requests.get(url)
soup = BeautifulSoup(page.content, "html.parser") #object that helps read website

if (page.status_code == 200): #can get page "good"
    ts = soup.find_all(class_="standings-team") #going to find all <span class="game...">x</span>

NCAAteams = [None]*len(ts)  #empty array of teams

print(f"Found {len(NCAAteams)} teams.")

for i in range(0,len(NCAAteams)):
    NCAAteams[i] = ts[i].text #takes the team names out of the object being held by t[i]

#print(NCAAteams) # printing an array of team names

############################## Get the team names #############################

years = [2021,2021,2022,2022]
months = ["11", "12", "01", "02"]
days = np.arange(1,33)


#initialize and create empty numpy tournament matrix
#tmat = np.zeros((len(teams),len(teams)))

gamectr = 0
games = []
teams = []

for j in range(0,len(months)):
    for day in days:
        if day < 10:
            url = f"https://www.ncaa.com/scoreboard/basketball-men/d1/{years[j]}/{months[j]}/0{day}/all-conf"
        else:
            url = f"https://www.ncaa.com/scoreboard/basketball-men/d1/{years[j]}/{months[j]}/{day}/all-conf"
        page = requests.get(url)
        if (page.status_code == 200):
            soup = BeautifulSoup(page.content, "html.parser")
                       
            names = soup.find_all("span", class_="gamePod-game-team-name")
            
            for k in range(0,int(len(names))):
                if (names[k] not in teams):
                    teams.append(names[k])
            
            N = int(len(names)/2) #number of games

########### Filter out NCAA teams only based  on current lineup. teams21 is the official list of teams that played in the conference games and were in the NCAA DI conferences. ###########   
teams21 = []
for i in range(0, len(teams)):
    if(teams[i].text in NCAAteams):
        teams21.append(teams[i].text)
        
print(len(teams21))
print(teams21)

##################### Now get the games and scores #####################
days = np.arange(1,33)
for j in range(0,len(months)):
    for day in days:
        if day < 10:
            url = f"https://www.ncaa.com/scoreboard/basketball-men/d1/{years[j]}/{months[j]}/0{day}/all-conf"
        else:
            url = f"https://www.ncaa.com/scoreboard/basketball-men/d1/{years[j]}/{months[j]}/{day}/all-conf"
        page = requests.get(url)
        if (page.status_code == 200):
            soup = BeautifulSoup(page.content, "html.parser")
                       
            names = soup.find_all("span", class_="gamePod-game-team-name")
            scores = soup.find_all("span", class_="gamePod-game-team-score")
            
        #grab each game from each day    
        for i in range(0,int(len(names)/2)):

            if ((names[2*i].text in teams21) and (names[2*i+1].text in teams21)):  #make sure both teams are in NCAA
                #print(f"{names[2*i].text} is in teams and so is {names[2*i+1].text}")

                if not((scores[2*i].text == "") or (scores[2*i+1].text == "")): #make sure both teams have a score, ie game played
                    gamectr += 1
                    games.append([names[2*i].text,names[2*i+1].text,scores[2*i].text,scores[2*i+1].text,years[j],months[j],day])

                    if (int(scores[2*i].text) > int(scores[2*i+1].text)):  #away team win
                        tmat[teams21.index(names[2*i].text), teams21.index(names[2*i+1].text)]+=1 
                        #print(f"{names[2*i].text} beat {names[2*i+1].text} by a score of {scores[2*i].text} to {scores[2*i+1].text} on {months[j]}/{day}")

                    if (int(scores[2*i+1].text) > int(scores[2*i].text)):  #home team win
                        tmat[teams21.index(names[2*i+1].text), teams21.index(names[2*i].text)]+=1
                        #print(f"{names[2*i+1].text} beat {names[2*i].text} by a score of {scores[2*i+1].text} to {scores[2*i].text} on {months[j]}/{day}")

                    if (int(scores[2*i].text) == int(scores[2*i+1].text)):   #draw
                        tmat[teams21.index(names[2*i+1].text), teams21.index(names[2*i].text)]+=0.5
                        tmat[teams21.index(names[2*i].text), teams21.index(names[2*i+1].text)]+=0.5

print("")
print(f"Processed {gamectr} games!")
print("")

################## should be ready to run any rating scheme from here ##################

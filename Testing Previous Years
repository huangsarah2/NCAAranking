###### Getting the team names starts on line 58 #######
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import requests #lets us grab the webpage from the internet
from bs4 import BeautifulSoup 

#loop over season dates and extract games

years = [2021,2021,2022,2022]
months = ["11", "12", "01", "02"]
days = np.arange(1,33)


#initialize and create empty numpy tournament matrix
tmat = np.zeros((len(teams),len(teams)))
gamectr = 0
games = []

for j in range(0,len(months)):
    for day in days:
        if day < 10:
            url = f"https://www.ncaa.com/scoreboard/basketball-men/d1/{years[j]}/{months[j]}/0{day}/all-conf"
        else:
            url = f"https://www.ncaa.com/scoreboard/basketball-men/d1/{years[j]}/{months[j]}/{day}/all-conf"
        page = requests.get(url)
        if (page.status_code == 200):
            soup = BeautifulSoup(page.content, "html.parser")
                       
            names = soup.find_all("span", class_="gamePod-game-team-name")
            scores = soup.find_all("span", class_="gamePod-game-team-score")
            
            N = int(len(names)/2) #number of games
            
            for i in range(0,int(len(names)/2)):
                if ((names[2*i].text in teams) and (names[2*i+1].text in teams)):  #make sure both teams are in NCAA
                    #print(f"{names[2*i].text} is in teams and so is {names[2*i+1].text}")
                    
                    if not((scores[2*i].text == "") or (scores[2*i+1].text == "")): #make sure both teams have a score, ie game played
                        gamectr += 1
                        games.append([names[2*i].text,names[2*i+1].text,scores[2*i].text,scores[2*i+1].text,years[j],months[j],day])
                        
                        if (int(scores[2*i].text) > int(scores[2*i+1].text)):  #away team win
                            tmat[teams.index(names[2*i].text), teams.index(names[2*i+1].text)]+=1 
                            #print(f"{names[2*i].text} beat {names[2*i+1].text} by a score of {scores[2*i].text} to {scores[2*i+1].text} on {months[j]}/{day}")
                        
                        if (int(scores[2*i+1].text) > int(scores[2*i].text)):  #home team win
                            tmat[teams.index(names[2*i+1].text), teams.index(names[2*i].text)]+=1
                            #print(f"{names[2*i+1].text} beat {names[2*i].text} by a score of {scores[2*i+1].text} to {scores[2*i].text} on {months[j]}/{day}")
                        
                        if (int(scores[2*i].text) == int(scores[2*i+1].text)):   #draw
                            tmat[teams.index(names[2*i+1].text), teams.index(names[2*i].text)]+=0.5
                            tmat[teams.index(names[2*i].text), teams.index(names[2*i+1].text)]+=0.5
                    
print("")
print(f"Processed {gamectr} games!")
print("")

#Getting the team names    
#away team, home team, away score, home score, year, mo, date
teams21 = []
for sublist in games:
    tempTeam1 = sublist[0]
#     print(tempTeam1)
    tempTeam2 = sublist[1]
    if (tempTeam1 not in teams21):
        teams21.append(tempTeam1)
    if (tempTeam2 not in teams21):
        teams21.append(tempTeam2)
        
len(teams21)

####### the rest of the code is the same for adding it games to a matrix #########

###################################################### This code runs, but processes 0 games #################################################################

#loop over season dates and extract games

years = [2021,2021,2022,2022]
months = ["11", "12", "01", "02"]
days = np.arange(1,33)

url = "https://www.ncaa.com/standings/basketball-men/d1/" #file
page = requests.get(url)
soup = BeautifulSoup(page.content, "html.parser") #object that helps read website

if (page.status_code == 200): #can get page "good"
    ts = soup.find_all(class_="standings-team")

#initialize and create empty numpy tournament matrix
tmat = np.zeros((355,355))
teams = [None]*len(ts)  #empty array of teams
gamectr = 0
games = []

for j in range(0,len(months)):
    for day in days:
        if day < 10:
            url = f"https://www.ncaa.com/scoreboard/basketball-men/d1/{years[j]}/{months[j]}/0{day}/all-conf"
        else:
            url = f"https://www.ncaa.com/scoreboard/basketball-men/d1/{years[j]}/{months[j]}/{day}/all-conf"
        page = requests.get(url)
        if (page.status_code == 200):
            soup = BeautifulSoup(page.content, "html.parser")
                       
            names = soup.find_all("span", class_="gamePod-game-team-name")
            scores = soup.find_all("span", class_="gamePod-game-team-score")
            
            N = int(len(names)/2) #number of games
            
            for i in range(0,int(len(names)/2)):
                if ((names[2*i].text in teams) and (names[2*i+1].text in teams)):  #make sure both teams are in NCAA
                    #print(f"{names[2*i].text} is in teams and so is {names[2*i+1].text}")
                    
                    if not((scores[2*i].text == "") or (scores[2*i+1].text == "")): #make sure both teams have a score, ie game played
                        gamectr += 1
                        games.append([names[2*i].text,names[2*i+1].text,scores[2*i].text,scores[2*i+1].text,years[j],months[j],day])
                        
                        if (int(scores[2*i].text) > int(scores[2*i+1].text)):  #away team win
                            tmat[teams.index(names[2*i].text), teams.index(names[2*i+1].text)]+=1 
                            #print(f"{names[2*i].text} beat {names[2*i+1].text} by a score of {scores[2*i].text} to {scores[2*i+1].text} on {months[j]}/{day}")
                        
                        if (int(scores[2*i+1].text) > int(scores[2*i].text)):  #home team win
                            tmat[teams.index(names[2*i+1].text), teams.index(names[2*i].text)]+=1
                            #print(f"{names[2*i+1].text} beat {names[2*i].text} by a score of {scores[2*i+1].text} to {scores[2*i].text} on {months[j]}/{day}")
                        
                        if (int(scores[2*i].text) == int(scores[2*i+1].text)):   #draw
                            tmat[teams.index(names[2*i+1].text), teams.index(names[2*i].text)]+=0.5
                            tmat[teams.index(names[2*i].text), teams.index(names[2*i+1].text)]+=0.5
                    
print("")
print(f"Processed {gamectr} games!")
print("")

#Getting the team names    
#away team, home team, away score, home score, year, mo, date
teams21 = []
for sublist in games:
    tempTeam1 = sublist[0]
#     print(tempTeam1)
    tempTeam2 = sublist[1]
    if (tempTeam1 not in teams21):
        teams21.append(tempTeam1)
    if (tempTeam2 not in teams21):
        teams21.append(tempTeam2)
        
len(teams21)

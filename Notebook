import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import requests #lets us grab the webpage from the internet
from bs4 import BeautifulSoup 

##get teams

url = "https://www.ncaa.com/standings/basketball-men/d1" #file
page = requests.get(url)
soup = BeautifulSoup(page.content, "html.parser") #object that helps read website

if (page.status_code == 200): #can get page "good"
    ts = soup.find_all(class_="standings-team") #going to find all <span class="game...">x</span>

teams = [None]*len(ts)  #empty array of teams

print(f"Found {len(teams)} teams.")

for i in range(0,len(teams)):
    teams[i] = ts[i].text #takes the team names out of the object being held by t[i]

print(teams) # printing an array of team names

##get overall and conference win/loss stats

tmat = np.zeros((len(teams),len(teams)))
gamectr = 0
tstats = []
tables = soup.findAll('table')

for table in tables:
    table_body = table.find('tbody')
    rows = table_body.find_all('tr')
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        tstats.append([ele for ele in cols if ele])
print(len(tstats))
for row in tstats:
    print(row)


#getting games between teams
#loop over season dates and extract games


years = [2023,2023,2024,2024]#
months = ["11", "12", "01", "02"]
days = np.arange(1,32)


#initialize and create empty numpy tournament matrix
tmat = np.zeros((len(teams),len(teams)))
gamectr = 0
games = []

for j in range(0,len(months)):
    for day in days:
        if day < 10:
            url = f"https://www.ncaa.com/scoreboard/basketball-men/d1/{years[j]}/{months[j]}/0{day}/all-conf"
        else:
            url = f"https://www.ncaa.com/scoreboard/basketball-men/d1/{years[j]}/{months[j]}/{day}/all-conf"
        page = requests.get(url)
        if (page.status_code == 200):
            soup = BeautifulSoup(page.content, "html.parser")
                       
            names = soup.find_all("span", class_="gamePod-game-team-name")
            scores = soup.find_all("span", class_="gamePod-game-team-score")
            
            N = int(len(names)/2) #number of games
            
            for i in range(0,int(len(names)/2)):
                if ((names[2*i].text in teams) and (names[2*i+1].text in teams)):  #make sure both teams are in WIAC
                    #print(f"{names[2*i].text} is in teams and so is {names[2*i+1].text}")
                    
                    if not((scores[2*i].text == "") or (scores[2*i+1].text == "")): #make sure both teams have a score, ie game played
                        gamectr += 1
                        games.append([names[2*i].text,names[2*i+1].text,scores[2*i].text,scores[2*i+1].text,years[j],months[j],day])
                        
                        if (int(scores[2*i].text) > int(scores[2*i+1].text)):  #away team win
                            tmat[teams.index(names[2*i].text), teams.index(names[2*i+1].text)]+=1 
                            #print(f"{names[2*i].text} beat {names[2*i+1].text} by a score of {scores[2*i].text} to {scores[2*i+1].text} on {months[j]}/{day}")
                        
                        if (int(scores[2*i+1].text) > int(scores[2*i].text)):  #home team win
                            tmat[teams.index(names[2*i+1].text), teams.index(names[2*i].text)]+=1
                            #print(f"{names[2*i+1].text} beat {names[2*i].text} by a score of {scores[2*i+1].text} to {scores[2*i].text} on {months[j]}/{day}")
                        
                        if (int(scores[2*i].text) == int(scores[2*i+1].text)):   #draw
                            tmat[teams.index(names[2*i+1].text), teams.index(names[2*i].text)]+=0.5
                            tmat[teams.index(names[2*i].text), teams.index(names[2*i+1].text)]+=0.5
                    
print("")
print(f"Processed {gamectr} games!")
print("")


#massey unweighted
numgames=len(games)
nteams=len(teams)

#create tournament as an 8x8 matrix of zeros
Tournament = np.zeros((numgames,nteams))
b=np.zeros((numgames, 1))
#print(type(Tournament))

#do one game for each --store in matrix
#would like to take the difference of the scores and who loses this is to fill in A

for i in range(numgames):
    ateam = games[i][0]
    hteam = games[i][1]
    ascore = games[i][2]
    hscore = games[i][3]
    
    h_index = teams.index(hteam) #index associated with home team
    a_index = teams.index(ateam)
 
    #fill in the matrix
    if (hscore >= ascore):
        Tournament[i, h_index] = 1
        Tournament[i, a_index] = -1
        b[i] = int(hscore) - int(ascore)
        
    elif (ascore > hscore):
        Tournament[i, h_index] = -1       
        Tournament[i, a_index] = 1
        #b is the vector of the differences of scores, but first cast as integers
        b[i] = int(ascore) - int(hscore)        
    Tournament
        
#if they tie, it is just a row of zeros, now solve with the method of least squares
       
M2 = np.dot(Tournament.T, Tournament)
B2 = np.dot(Tournament.T, b)
#replace the bottom row with all ones to prevent singular matrix

M2[-1] = np.ones(nteams)
B2[-1] = 0

#solve for r

r = np.linalg.solve(M2, B2)

for i in range(0, nteams):
    print(f"{teams[i]}: {r[i][0]:4.2f}")
